plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'iwo.wintech'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    mockitoAgent {}
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('testContainerVersion', "1.20.4")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    implementation 'org.springframework.retry:spring-retry'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    implementation 'org.flywaydb:flyway-database-postgresql'


    runtimeOnly 'org.postgresql:postgresql'


//    implementation 'org.springframework.boot:spring-boot-starter-logging'



    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'ch.qos.logback:logback-core:1.5.15'
    implementation 'ch.qos.logback:logback-classic:1.5.15'

    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
//    testImplementation('org.springframework.boot:spring-boot-starter-test'){
//        exclude group: 'org.mockito', module: 'mockito-core'
//    }
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation(('org.springframework.boot:spring-boot-starter-webflux'))
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation "org.testcontainers:postgresql"
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'


//    add('mockitoAgent', 'org.mockito:mockito-core') { transitive = false}
}

tasks {
    test {
        useJUnitPlatform()
//        jvmArgs("-javaagent:${configurations.mockitoAgent.asPath}")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-parameters"
}

bootRun {
//    systemProperties(Map.of("spring.profiles.active", "testdata"))
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainerVersion}"
    }
}

bootBuildImage {
    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    imageName = "${ project.name }"
    environment = ["BP_JVM_VERSION" : "21.*",
                   "BP_IMAGE_LABELS": "org.opencontainers.image.source=${ vcs_provider }/${ vcs_owner }/${ repository } org.opencontainers.image.description=${project.name}-Image"
    ]

    docker {
        publishRegistry {
            imageName = "${ container_registry }/${ vcs_owner }/${ project.name }"
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}